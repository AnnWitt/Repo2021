+ 1. Utwórz klasę o nazwie Exercise1
W klasie zapisz kod, który wyświetli w konsoli tekst "Witaj świecie!".
+ 2. Utwórz klasę o nazwie Exercise2
W klasie zapisz kod, który wyświetli w konsoli w kolejnych wierszach:
Witaj
Świecie!
+ 3. Utwórz klasę o nazwie Exercise3
W klasie zapisz kod, który wyświetli w konsoli sekwencję:
Wynik dodawania 2 + 2 to: _WYNIK_
gdzie _WYNIK_ to wynik sumowania 2 + 2 (użyj operatora dodawania).
+ 4. Utwórz klasę o nazwie Exercise4. W klasie zapisz kod, który wyświetli:
Wynik dzielenia 13 przez 5 to : _X_, reszta: _Y_
gdzie _X_ to wynik dzielenia (użyj operatora dzielenia), a _Y_ to reszta z dzielenia (użyj operatora modulo)
+ 5. Utwórz klasę o nazwie Exercise5. Zadeklaruj zmienną typu liczbowego. Przypisz zmiennej sumę 10 oraz 5. Następnie wypisz wartość w konsoli.
+ 6. Utwórz klasę o nazwie Exercise6. Zadeklaruj zmienną typu tekstowego. Przypisz zmiennej tekst "Cześć".
Zadeklaruj drugą zmienną typu tekstowego, zmiennej przypisz tekst - jakieś imię. Wypisz w konsoli konkatenację wartości pierwszej zmiennej, spacji oraz drugiej zmiennej.
+ 7. Utwórz klasę Exercise7. Zadeklaruj zmienną typu logicznego. Przypisz do zmiennej wynik wyrażenia:
3 jest mniejsze lub równe 5
oraz jednocześnie:
10 jest różne od 15 lub 15 jest mniejsze od 10.
Wypisz wartość zmiennej w konsoli.

Klasy
Do każdego zadania należy utworzyć kilka obiektów i przetestować działanie metod!
+ 1. Stwórz klasę Rectangle, która będzie miała pola: a, b (długości boków). Do klasy dodaj konstruktor (ustawiający wartości wszystkich pól) oraz gettery.
+ 1b. Dodaj do klasy metodę getArea, która zwróci pole powierzchni, oraz metodę getPerimeter zwracającą obwód figury.
+ 2. Postąp analogicznie dla koła.
+ 3. Stwórz klasę Person, która będzie miała pola: firstName, lastName oraz age oraz konstruktor (ustawiający wartości wszystkich pól), gettery i setter dla wieku.
+ 4. Stwórz klasę CoffeeMaker (ekspres do kawy). W klasie mamy pola: manufacturer (producent), grindSize (stopień mielenia). W klasie mamy konstruktor ustawiający wartości pól zgodnie z wartościami parametrów. Klasa oferuje metodę makeCoffee, która niczego nie zwraca. Metoda wypisuje w konsoli tekst: Ekspres firmy ... mieli ziarna na grubość ... i parzy kawę.
+ 5. Stwórz klasę Room, która będzie miała pola: area oraz height, konstruktor oraz gettery.

6. Stwórz klasę House, która będzie miała pola: address (String), kitchen, bathroom oraz tablicę pokojów (rooms), konstruktor oraz gettery.
7. Do klasy House dodaj metodę getArea, która zwróci pole powierzchni domu.
8. Stwórz klasę Party, która będzie miała pola: host (gospodarz), attendees (uczestnicy) oraz konstruktor i gettery. Do klasy dodaj metodę getAverageAge, która zwróci średni wiek uczestników.


9. Stwórz typ Lock, reprezentujący zamek na kod (z trzema przekładniami - np. zamek do walizki/roweru). Będziemy mogli tworzyć obiekt
typu Lock przekazując jako parametry konstruktora trzy cyfry - kod otwierający zamek. Domyślnie obiekt będzie tworzony z losowym
ustawieniem przekładni. Obiekt typu Lock będzie oferował trzy metody zmieniające ustawienie każdej z przekładni o jedną pozycję w prawo.
Będzie również oferował metodę sprawdzającą, czy zamek jest otwarty, czy nie, oraz metodę wypisującą na ekranie aktualnie ustawioną
kombinację zamka.


10. Zapytajmy użytkownika o kombinację otwierającą zamek. Następnie, tworzymy zamek i dopóki utworzony zamek będzie zamknięty, pytamy
użytkownika o to, którą przekładnię przełożyć.




/**
     * 2. Stworzcie klasę samochód i dodajcie do niej pola(model, marka, silnik, typSilnika, kolor). Następnie stwórzcie taką
     metodę, aby osiągnąć taki rezultat ->
     * a) filtrujSamochodyDlaPodanegoKoloru(String kolor, samochod1, samochod2) lub filtrujSamochodyDlaPodanegoKoloru
     (String kolor, samochod1, samochod2, samocho3)
     * b) filtrujSamochodyDlaPodanegoTypuSilnika(TypSilnika typSilnika, samochod1) lub filtrujSamochodyDlaPodanegoTypuSilnika
     (TypSilnika typSilnika, samochod1, samochod2)
     * TypSilnika -> ENUM (ELEKTRYCZNY, BENZYNOWY, DISIEL, HYBRYDA) -> do tego enuma dodali pole description oraz moc.
     * C) filtrowanie samochodu po marke i modelu.
     * d) Do tworzenia samochodu użyli wzorca projektowego BUILDER.
     */
